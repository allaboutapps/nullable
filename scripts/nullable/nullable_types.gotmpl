// Code generated by go generate; DO NOT EDIT.
// This file was generated by scripts/models/gen_nullable_types.go
package nullable

import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/go-openapi/strfmt"
)

// {{ .NullableType }} represents a {{ .Type }} that may be null or not
// present in json at all.
type {{ .NullableType }} struct {
	Present bool // Present is true if key is present in json
	Valid   bool // Valid is true if value is not null and valid {{ .Type }}
	Value   {{ .Type }}
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func ({{ .Short }} *{{ .NullableType }}) Ptr() *{{ .Type }} {
	if {{ .Short }}.Present && {{ .Short }}.Valid {
		return &{{ .Short }}.Value
	}

	return nil
}

// UnmarshalJSON implements json.Marshaler interface.
func ({{ .Short }} *{{ .NullableType }}) UnmarshalJSON(data []byte) error {
	{{ .Short }}.Present = true

	if bytes.Equal(data, null) {
		return nil
	}

	if err := json.Unmarshal(data, &{{ .Short }}.Value); err != nil {
		return err
	}

	{{ .Short }}.Valid = true
	return nil
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func ({{ .Short }} *{{ .NullableType }}) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func ({{ .Short }} *{{ .NullableType }}) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// {{ .NullableType }}Slice represents a []{{ .Type }} that may be null or not
// present in json at all.
type {{ .NullableType }}Slice struct {
	Present bool // Present is true if key is present in json
	Valid   bool // Valid is true if value is not null
	Value   []{{ .Type }}
}

// UnmarshalJSON implements json.Marshaler interface.
func ({{ .Short }} *{{ .NullableType }}Slice) UnmarshalJSON(data []byte) error {
	{{ .Short }}.Present = true

	if bytes.Equal(data, null) {
		return nil
	}

	if err := json.Unmarshal(data, &{{ .Short }}.Value); err != nil {
		return err
	}

	{{ .Short }}.Valid = true
	return nil
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func ({{ .Short }} *{{ .NullableType }}Slice) Ptr() *[]{{ .Type }} {
	if {{ .Short }}.Present && {{ .Short }}.Valid {
		return &{{ .Short }}.Value
	}

	return nil
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func ({{ .Short }} *{{ .NullableType }}Slice) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func ({{ .Short }} *{{ .NullableType }}Slice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
